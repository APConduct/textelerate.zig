name: Update Dependencies

on:
  schedule:
    # Run weekly on Sundays at 02:00 UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  update-zig:
    name: Check for Zig Updates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current Zig version
        id: current_version
        run: |
          CURRENT=$(grep "ZIG_VERSION:" .github/workflows/ci.yml | head -1 | cut -d"'" -f2)
          echo "CURRENT_VERSION=$CURRENT" >> $GITHUB_OUTPUT
          echo "Current Zig version: $CURRENT"

      - name: Check latest Zig release
        id: latest_version
        run: |
          LATEST=$(curl -s https://api.github.com/repos/ziglang/zig/releases/latest | jq -r '.tag_name')
          echo "LATEST_VERSION=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest Zig version: $LATEST"

      - name: Compare versions
        id: compare
        run: |
          CURRENT="${{ steps.current_version.outputs.CURRENT_VERSION }}"
          LATEST="${{ steps.latest_version.outputs.LATEST_VERSION }}"

          if [ "$CURRENT" != "$LATEST" ]; then
            echo "UPDATE_NEEDED=true" >> $GITHUB_OUTPUT
            echo "Zig update available: $CURRENT -> $LATEST"
          else
            echo "UPDATE_NEEDED=false" >> $GITHUB_OUTPUT
            echo "Zig is up to date"
          fi

      - name: Setup latest Zig
        if: steps.compare.outputs.UPDATE_NEEDED == 'true'
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ steps.latest_version.outputs.LATEST_VERSION }}

      - name: Test with new Zig version
        if: steps.compare.outputs.UPDATE_NEEDED == 'true'
        run: |
          echo "Testing with Zig ${{ steps.latest_version.outputs.LATEST_VERSION }}"
          zig version

          # Run tests to ensure compatibility
          zig test src/main.zig
          zig test src/root.zig
          zig build

          echo "All tests passed with new Zig version!"

      - name: Update CI workflow
        if: steps.compare.outputs.UPDATE_NEEDED == 'true'
        run: |
          LATEST="${{ steps.latest_version.outputs.LATEST_VERSION }}"
          sed -i "s/ZIG_VERSION: '[^']*'/ZIG_VERSION: '$LATEST'/" .github/workflows/ci.yml
          sed -i "s/version: '[^']*'/version: '$LATEST'/" .github/workflows/ci.yml | head -1

      - name: Create Pull Request
        if: steps.compare.outputs.UPDATE_NEEDED == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: update Zig version to ${{ steps.latest_version.outputs.LATEST_VERSION }}

            - Updated CI workflow to use Zig ${{ steps.latest_version.outputs.LATEST_VERSION }}
            - Verified compatibility with all tests passing
            - Automated update via dependency workflow
          title: 'chore: update Zig version to ${{ steps.latest_version.outputs.LATEST_VERSION }}'
          body: |
            ## Zig Version Update

            This PR updates the Zig version used in CI from `${{ steps.current_version.outputs.CURRENT_VERSION }}` to `${{ steps.latest_version.outputs.LATEST_VERSION }}`.

            ### Changes
            - ✅ Updated `.github/workflows/ci.yml` with new Zig version
            - ✅ Verified all tests pass with new version
            - ✅ Confirmed build compatibility

            ### Testing
            All tests have been run against the new Zig version and are passing:
            - Library tests: ✅
            - Main tests: ✅
            - Build process: ✅

            This is an automated update. Please review and merge if everything looks good.
          branch: update-zig-${{ steps.latest_version.outputs.LATEST_VERSION }}
          delete-branch: true

  check-security:
    name: Security Dependency Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: '0.13.0'

      - name: Audit dependencies
        run: |
          echo "Checking for security vulnerabilities..."

          # Check for known vulnerable patterns in code
          echo "Scanning source code for security issues..."

          # Look for potential buffer overflows or unsafe operations
          if grep -r "unsafe\|@ptrCast\|@alignCast" src/; then
            echo "⚠️  Found potentially unsafe operations"
          else
            echo "✅ No obvious unsafe operations found"
          fi

          # Check for hardcoded credentials or secrets
          if grep -r -i "password\|secret\|key.*=\|token.*=" src/; then
            echo "⚠️  Potential secrets found in source code"
            exit 1
          else
            echo "✅ No hardcoded secrets detected"
          fi

          # Verify memory safety
          echo "Building with safety checks..."
          zig build -Doptimize=Debug
          zig build -Doptimize=ReleaseSafe

          echo "✅ Security scan completed"

  validate-project:
    name: Project Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check project structure
        run: |
          echo "Validating project structure..."

          # Check required files exist
          REQUIRED_FILES=(
            "README.md"
            "VERSION"
            "build.zig"
            "src/main.zig"
            "src/root.zig"
            "src/error.zig"
            ".github/workflows/ci.yml"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file exists"
            else
              echo "❌ $file missing"
              exit 1
            fi
          done

      - name: Validate version consistency
        run: |
          echo "Checking version consistency..."

          # Get version from VERSION file
          FILE_VERSION=$(cat VERSION)
          echo "VERSION file: $FILE_VERSION"

          # Check if version is in proper semver format
          if [[ $FILE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "✅ Version format is valid"
          else
            echo "❌ Invalid version format in VERSION file"
            exit 1
          fi

          # Verify version is mentioned in README
          if grep -q "$FILE_VERSION" README.md; then
            echo "✅ Version is documented in README"
          else
            echo "⚠️  Version not found in README"
          fi

      - name: Check code quality metrics
        run: |
          echo "Analyzing code quality..."

          # Count lines of code
          TOTAL_LINES=$(find src/ -name "*.zig" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "Total lines of code: $TOTAL_LINES"

          # Count test cases
          TEST_COUNT=$(grep -r "test \"" src/ | wc -l)
          echo "Total test cases: $TEST_COUNT"

          # Calculate test coverage ratio (rough estimate)
          if [ $TOTAL_LINES -gt 0 ]; then
            COVERAGE_RATIO=$((TEST_COUNT * 100 / (TOTAL_LINES / 50)))
            echo "Estimated test coverage: ~$COVERAGE_RATIO%"

            if [ $COVERAGE_RATIO -lt 30 ]; then
              echo "⚠️  Low test coverage detected"
            else
              echo "✅ Good test coverage"
            fi
          fi

  notify-maintainers:
    name: Notify Maintainers
    runs-on: ubuntu-latest
    needs: [update-zig, check-security, validate-project]
    if: always()

    steps:
      - name: Summary Report
        run: |
          echo "## Dependency Update Summary"
          echo ""
          echo "### Job Results:"
          echo "- Zig Update Check: ${{ needs.update-zig.result }}"
          echo "- Security Scan: ${{ needs.check-security.result }}"
          echo "- Project Validation: ${{ needs.validate-project.result }}"
          echo ""

          if [ "${{ needs.update-zig.result }}" = "success" ] &&
             [ "${{ needs.check-security.result }}" = "success" ] &&
             [ "${{ needs.validate-project.result }}" = "success" ]; then
            echo "✅ All dependency checks passed!"
          else
            echo "❌ Some checks failed - please review the workflow logs"
          fi
